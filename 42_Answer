// 42. Solve the sliding window maximum problem.

import java.util.*;

class SlidingWindowMaximum {
    public static void main(String[] args) {
        int[] nums = {1,3,-1,-3,5,3,6,7};
        int k = 3;
        Deque<Integer> deque = new ArrayDeque<>();
        List<Integer> res = new ArrayList<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (!deque.isEmpty() && deque.peek() == i - k)
                deque.poll();
            
            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i])
                deque.pollLast();
            
            deque.offer(i);
            
            if (i >= k - 1)
                res.add(nums[deque.peek()]);
        }
        
        System.out.println(res);
    }
}
// Time Complexity: O(N)
// Space Complexity: O(N)
