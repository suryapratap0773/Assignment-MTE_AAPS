// 48. Solve the problem of finding the next permutation of a given array.

class NextPermutation {
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        int n = nums.length;
        int i = n - 2;

        // Find the first decreasing element from the right
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        if (i >= 0) {
            int j = n - 1;
            // Find the element just larger than nums[i]
            while (nums[j] <= nums[i]) {
                j--;
            }
            // Swap the two elements
            swap(nums, i, j);
        }
        
        // Reverse the elements after index i
        reverse(nums, i + 1, n - 1);
        
        System.out.println("Next permutation: " + Arrays.toString(nums));
    }

    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    private static void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i++, j--);
        }
    }
}
// Time Complexity: O(N)
// Space Complexity: O(1)
