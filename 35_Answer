// 35. Find the k-most frequent elements in an array using a priority queue.

import java.util.*;

class KMostFrequentElements {
    public static void main(String[] args) {
        int[] nums = {1,1,1,2,2,3};
        int k = 2;
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int num : nums)
            map.put(num, map.getOrDefault(num, 0) + 1);
        
        PriorityQueue<Integer> heap = new PriorityQueue<>((a,b) -> map.get(a) - map.get(b));
        
        for (int num : map.keySet()) {
            heap.add(num);
            if (heap.size() > k)
                heap.poll();
        }
        
        List<Integer> result = new ArrayList<>();
        while (!heap.isEmpty())
            result.add(heap.poll());
        
        System.out.println(result);
    }
}
// Time Complexity: O(N log K)
// Space Complexity: O(N)
